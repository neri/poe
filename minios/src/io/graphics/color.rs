//! Color types and palette

use embedded_graphics::pixelcolor::raw::RawU8;
use embedded_graphics::prelude::*;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct IndexedColor(pub u8);

impl IndexedColor {
    pub const BLACK: Self = Self(0);
    pub const BLUE: Self = Self(1);
    pub const GREEN: Self = Self(2);
    pub const CYAN: Self = Self(3);
    pub const RED: Self = Self(4);
    pub const MAGENTA: Self = Self(5);
    pub const BROWN: Self = Self(6);
    pub const LIGHT_GRAY: Self = Self(7);
    pub const DARK_GRAY: Self = Self(8);
    pub const LIGHT_BLUE: Self = Self(9);
    pub const LIGHT_GREEN: Self = Self(10);
    pub const LIGHT_CYAN: Self = Self(11);
    pub const LIGHT_RED: Self = Self(12);
    pub const LIGHT_MAGENTA: Self = Self(13);
    pub const YELLOW: Self = Self(14);
    pub const WHITE: Self = Self(15);

    #[inline]
    pub const fn new(value: u8) -> Self {
        Self(value)
    }

    #[inline]
    pub const fn into_raw(self) -> u8 {
        self.0
    }
}

impl PixelColor for IndexedColor {
    type Raw = RawU8;
}

/// Standard 256 color palette (ARGB in little endian)
pub const COLOR_PALETTE: [u32; 256] = [
    0xff000000, 0xff000099, 0xff009900, 0xff009999, 0xff990000, 0xff990099, 0xff999900, 0xff999999,
    0xff666666, 0xff0000ff, 0xff00ff00, 0xff00ffff, 0xffff0000, 0xffff00ff, 0xffffff00, 0xffffffff,
    0xff000000, 0xff330000, 0xff660000, 0xff990000, 0xffcc0000, 0xffff0000, 0xff003300, 0xff333300,
    0xff663300, 0xff993300, 0xffcc3300, 0xffff3300, 0xff006600, 0xff336600, 0xff666600, 0xff996600,
    0xffcc6600, 0xffff6600, 0xff009900, 0xff339900, 0xff669900, 0xff999900, 0xffcc9900, 0xffff9900,
    0xff00cc00, 0xff33cc00, 0xff66cc00, 0xff99cc00, 0xffcccc00, 0xffffcc00, 0xff00ff00, 0xff33ff00,
    0xff66ff00, 0xff99ff00, 0xffccff00, 0xffffff00, 0xff000033, 0xff330033, 0xff660033, 0xff990033,
    0xffcc0033, 0xffff0033, 0xff003333, 0xff333333, 0xff663333, 0xff993333, 0xffcc3333, 0xffff3333,
    0xff006633, 0xff336633, 0xff666633, 0xff996633, 0xffcc6633, 0xffff6633, 0xff009933, 0xff339933,
    0xff669933, 0xff999933, 0xffcc9933, 0xffff9933, 0xff00cc33, 0xff33cc33, 0xff66cc33, 0xff99cc33,
    0xffcccc33, 0xffffcc33, 0xff00ff33, 0xff33ff33, 0xff66ff33, 0xff99ff33, 0xffccff33, 0xffffff33,
    0xff000066, 0xff330066, 0xff660066, 0xff990066, 0xffcc0066, 0xffff0066, 0xff003366, 0xff333366,
    0xff663366, 0xff993366, 0xffcc3366, 0xffff3366, 0xff006666, 0xff336666, 0xff666666, 0xff996666,
    0xffcc6666, 0xffff6666, 0xff009966, 0xff339966, 0xff669966, 0xff999966, 0xffcc9966, 0xffff9966,
    0xff00cc66, 0xff33cc66, 0xff66cc66, 0xff99cc66, 0xffcccc66, 0xffffcc66, 0xff00ff66, 0xff33ff66,
    0xff66ff66, 0xff99ff66, 0xffccff66, 0xffffff66, 0xff000099, 0xff330099, 0xff660099, 0xff990099,
    0xffcc0099, 0xffff0099, 0xff003399, 0xff333399, 0xff663399, 0xff993399, 0xffcc3399, 0xffff3399,
    0xff006699, 0xff336699, 0xff666699, 0xff996699, 0xffcc6699, 0xffff6699, 0xff009999, 0xff339999,
    0xff669999, 0xff999999, 0xffcc9999, 0xffff9999, 0xff00cc99, 0xff33cc99, 0xff66cc99, 0xff99cc99,
    0xffcccc99, 0xffffcc99, 0xff00ff99, 0xff33ff99, 0xff66ff99, 0xff99ff99, 0xffccff99, 0xffffff99,
    0xff0000cc, 0xff3300cc, 0xff6600cc, 0xff9900cc, 0xffcc00cc, 0xffff00cc, 0xff0033cc, 0xff3333cc,
    0xff6633cc, 0xff9933cc, 0xffcc33cc, 0xffff33cc, 0xff0066cc, 0xff3366cc, 0xff6666cc, 0xff9966cc,
    0xffcc66cc, 0xffff66cc, 0xff0099cc, 0xff3399cc, 0xff6699cc, 0xff9999cc, 0xffcc99cc, 0xffff99cc,
    0xff00cccc, 0xff33cccc, 0xff66cccc, 0xff99cccc, 0xffcccccc, 0xffffcccc, 0xff00ffcc, 0xff33ffcc,
    0xff66ffcc, 0xff99ffcc, 0xffccffcc, 0xffffffcc, 0xff0000ff, 0xff3300ff, 0xff6600ff, 0xff9900ff,
    0xffcc00ff, 0xffff00ff, 0xff0033ff, 0xff3333ff, 0xff6633ff, 0xff9933ff, 0xffcc33ff, 0xffff33ff,
    0xff0066ff, 0xff3366ff, 0xff6666ff, 0xff9966ff, 0xffcc66ff, 0xffff66ff, 0xff0099ff, 0xff3399ff,
    0xff6699ff, 0xff9999ff, 0xffcc99ff, 0xffff99ff, 0xff00ccff, 0xff33ccff, 0xff66ccff, 0xff99ccff,
    0xffccccff, 0xffffccff, 0xff00ffff, 0xff33ffff, 0xff66ffff, 0xff99ffff, 0xffccffff, 0xffffffff,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
